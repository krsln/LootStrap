// ===========================================================================
// Components - Buttons
// ===========================================================================
@use 'sass:math';

$component-Name: $var-Prefix + 'btn-';
@import "../_theme-customized";

.Btn {
  position: relative;
  display: inline-block;

  font-family: var(--ls-font);
  font-size: var(--ls-font-size);
  font-weight: var(--ls-font-weight);

  color: $fg-Light;
  background-color: transparent;

  border: $Border-width solid transparent;
  //border: $Border;
  //box-shadow: $Shadow;

  //@extend .Btn-ripple;

  text-align: center;
  text-decoration: none;
  vertical-align: middle;
  user-select: none;
  cursor: pointer;

  padding: 0.40rem 0.75rem;
  border-radius: 0.25rem;
  line-height: 1.5;

  &:hover, &:active, &:focus {
    outline: none !important;
    box-shadow: $Shadow;
  }

  &:checked {
    box-shadow: Shadow-mixer($Shadow, $Shadow-inner);

  }
}

.Btn-link {
  background: transparent;
  color: #3e64ff;
  border: none;
  box-shadow: none;
  padding: 0;
}

/*
// Rounded
*/

.Btn-round {
  border-radius: 50rem !important;

  &:before, &:after {
    border-radius: 50rem !important;
  }
}

/*
// Btn Theme support
*/

.Btn {
  &[class*='Btn-']:not([class*="Btn-outline-"]) {
    color: $fg-Darkest;
    background: $bg-Darkest;
    border-color: $Border-color;

    &:hover, &:focus {
      color: $fg-Dark;
      background-color: $bg-Dark;
      border-color: $bg-Darkest;
    }

    &.Ripple, &.Border-fx-draw, &.Border-fx-meet, &.Border-fx-center {
      --ls-effect-color: #{$fg-Dark};
    }
  }

  &[class*='Btn-outline-'] {
    color: $bg-Darkest;
    background-color: inherit;
    border-color: $bg-Darkest;

    &:hover {
      color: $fg-Dark;
      background-color: $bg-Dark;
      border-color: $bg-Darkest;
    }

    &.Ripple, &.Border-fx-draw, &.Border-fx-meet, &.Border-fx-center {
      --ls-effect-color: #{$fg-Dark};
    }
  }
}

/*
// Effects / Ripple effect
// https://css-tricks.com/how-to-recreate-the-ripple-effect-of-material-design-buttons/
// Cant do it without js based on mouse click coords
*/

.Ripple {
  $color: var(--ls-effect-color, $fg-Active);
  position: relative;
  overflow: hidden;
  transform: translate3d(0, 0, 0);

  &:after {
    content: "";
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;

    pointer-events: none;
    background-image: radial-gradient(circle, $color 10%, transparent 10.01%);
    background-repeat: no-repeat;
    background-position: 50%;
    transform: scale(10, 10);
    opacity: 0;
    transition: transform .5s, opacity 1s;
  }

  &:active:after {
    transform: scale(0, 0);
    opacity: .2;
    transition: 0s;
  }
}

.Border-fx-draw {
  $color: var(--ls-effect-color, $Border-color);
  $width: 2px;
  $vertical: top;
  $horizontal: left;
  $duration: 0.10s; // 0.25s

  //transition: color $duration $duration/3;
  //transition: color $duration math.div($duration, 3);
  position: relative;
  border-radius: 0;

  &:before, &:after {
    // Set border to invisible, so we don't see a 4px border on a 0x0 element before the transition starts
    border: $width solid transparent;
    box-sizing: border-box;
    content: '';
    pointer-events: none;
    position: absolute;

    width: 0;
    height: 0;
  }

  // This covers the top & right borders (expands right, then down)
  &:before {
    $h-side: if($horizontal == 'left', 'right', 'left');

    #{$vertical}: 0;
    #{$horizontal}: 0;
  }

  // And this the bottom & left borders (expands left, then up)
  &:after {
    $v-side: if($vertical == 'top', 'bottom', 'top');
    $h-side: if($horizontal == 'left', 'right', 'left');

    #{$v-side}: 0;
    #{$h-side}: 0;
  }

  &:hover {
    &:before, &:after {
      width: 100%;
      height: 100%;
    }

    &:before {
      $h-side: if($horizontal == 'left', 'right', 'left');
      // Make borders visible
      border-#{$vertical}-color: $color;
      border-#{$h-side}-color: $color;

      transition: width $duration ease-out, // Width expands first
      height $duration ease-out $duration; // And then height
    }

    &:after {
      $v-side: if($vertical == 'top', 'bottom', 'top');
      // Make borders visible
      border-#{$v-side}-color: $color;
      border-#{$horizontal}-color: $color;

      transition: border-color 0s ease-out $duration * 2, // Wait for :before to finish before showing border
      width $duration ease-out $duration * 2, // And then expanding width
      height $duration ease-out $duration * 3; // And finally height
    }
  }
}

.Border-fx-meet {
  $color: var(--ls-effect-color, $Border-color);
  $width: 2px;
  $vertical: bottom;
  $horizontal: right;
  $duration: 0.25s;

  //transition: color $duration $duration/3;
  //transition: color $duration math.div($duration, 3);
  position: relative;
  border-radius: 0;

  &:before, &:after {
    border: 0 solid transparent;
    box-sizing: border-box;
    content: '';
    pointer-events: none;
    position: absolute;
    width: 0;
    height: 0;

    #{$vertical}: 0;
    #{$horizontal}: 0;
  }

  &:before {
    $h-side: if($horizontal == 'left', 'right', 'left');

    border-#{$vertical}-width: $width;
    border-#{$h-side}-width: $width;
  }

  &:after {
    $v-side: if($vertical == 'top', 'bottom', 'top');

    border-#{$v-side}-width: $width;
    border-#{$horizontal}-width: $width;
  }

  &:hover {
    &:before, &:after {
      border-color: $color;
      transition: border-color 0s, width $duration, height $duration;
      width: 100%;
      height: 100%;
    }

    &:before {
      transition-delay: 0s, 0s, $duration;
    }

    &:after {
      transition-delay: 0s, $duration, 0s;
    }
  }
}

.Border-fx-center {
  $color: var(--ls-effect-color, $Border-color);
  $width: 2px;
  $duration: 0.5s;

  position: relative;
  border-radius: 0;

  // Set up base styles, we're going to scale instead of animating width/height
  &:before, &:after {
    border: 0 solid transparent;
    box-sizing: border-box;
    content: '';
    pointer-events: none;
    position: absolute;

    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    transform-origin: center; // Ensure scaling is done from the center (expands outwards)
  }

  // scale3d(<scale-horizontal>, <scale-vertical>, <scale-depth>);
  &:before {
    border-top: $width solid $color;
    border-bottom: $width solid $color;
    transform: scale3d(0, 1, 1); // Shrink only width
  }

  &:after {
    border-left: $width solid $color;
    border-right: $width solid $color;
    transform: scale3d(1, 0, 1); // Shrink only height
  }

  &:hover:before, &:hover:after {
    transform: scale3d(1, 1, 1); // Show full-size
    transition: transform $duration;
  }
}
