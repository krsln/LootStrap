/*
// ===========================================================================
// Mixins - Utilities
// ===========================================================================
*/
@mixin Utility-applier($important, $class-prefix, $properties, $values, $pseudo:null ) {
  @each $key, $value in $values {
    // Don't prefix if value key is null (eg. with shadow class)
    $class-suffix: if($key, if($class-prefix == ""  , "", "-") + $key, "");

    @if $value != null {
      .#{$class-prefix + $class-suffix} {

        @if $pseudo != null {
          &:#{$pseudo} {
            @each $property in $properties {
              #{$property}: $value if($important, !important, null);
            }
          }
        } @else {
          @each $property in $properties {
            #{$property}: $value if($important, !important, null);
          }
        }
      }
    }
  }
}

@mixin Utility-value-separator($utility, $breakpoints: $responsive-Breakpoints) {
  $values: map-get($utility, Values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  $properties: map-get($utility, Properties);
  // Multiple properties are possible, for example with vertical or horizontal margins or paddings
  @if type-of($properties) == "string" {
    $properties: append((), $properties);
  }

  $important: map-get($utility, Important);
  $responsive: map-get($utility, Responsive);
  $pseudo: map-get($utility, Pseudo); // null before after
  $print: map-get($utility, Print); // TODO: media print..

  // Use custom class if present
  $class-prefix: if(map-has-key($utility, Prefix), map-get($utility, Prefix), nth($properties, 1));
  $class-prefix: if($class-prefix == null, "", $class-prefix);

  @if $responsive {
    @each $breakpointKey, $breakpointValue in $breakpoints {
      $responsive-Infix: if($breakpointValue == 0, "", "-#{$breakpointKey}");
      @include media-min-W($breakpointValue) {
        @include Utility-applier($important, $class-prefix + $responsive-Infix, $properties, $values, $pseudo);
      }
    }
  } @else {
    @include Utility-applier($important, $class-prefix, $properties, $values, $pseudo);
  }
}

/*
 *  KEY     : VALUES
 * "Opacity": (Prefix: Opacity, Properties: opacity, Important: true, Responsive: false, Values: $opacity-map,),
 */
@mixin Utilities($utilities) {
  @each $keyUtil, $valueUtil in $utilities {
    @include Utility-value-separator($valueUtil);
  }
}