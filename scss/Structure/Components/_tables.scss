/**
 * Components - Tables
 *
*/

.Table {
  --#{$Prefix}table-accent-bg: #{$Table-accent-bg};
  --#{$Prefix}table-bg: #{$Table-bg};
  --#{$Prefix}table-color: #{$Table-color};
  --#{$Prefix}table-border-color: #{$Table-border-color};

  --#{$Prefix}table-striped-bg: #{$Table-striped-bg};
  --#{$Prefix}table-striped-color: #{$Table-striped-color};
  --#{$Prefix}table-active-bg: #{$Table-active-bg};
  --#{$Prefix}table-active-color: #{$Table-active-color};
  --#{$Prefix}table-hover-bg: #{$Table-hover-bg};
  --#{$Prefix}table-hover-color: #{$Table-hover-color};

  width: 100%;
  margin-bottom: $Card-margin-bottom;
  vertical-align: $Table-cell-vertical-align;

  color: var(--#{$Prefix}table-color);
  border-color: var(--#{$Prefix}table-border-color);

  font-family: $Table-font-family;

  // Target th & td
  // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
  // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
  // Another advantage is that this generates less code and makes the selector less specific making it easier to override.
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $Table-cell-padding-y $Table-cell-padding-x;
    background-color: var(--#{$Prefix}table-bg);
    border-bottom-width: $Table-border-width;
    box-shadow: inset 0 0 0 9999px var(--#{$Prefix}table-accent-bg);
  }

  > tbody {
    vertical-align: inherit;
  }

  > thead {
    vertical-align: bottom;
  }
}

//.Table-group-divider {
//  border-top: calc(2 * #{$Table-border-width}) solid currentColor;
//}


//
// Change placement of captions with a class
//

.Caption-top {
  caption-side: top;
}

//
// Condensed table w/ half padding
//

.Table-sm {
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $Table-cell-padding-y-sm $Table-cell-padding-x-sm;
  }
}

// Border versions
//
// Add or remove borders all around the table and between all the columns.
//
// When borders are added on all sides of the cells, the corners can render odd when
// these borders do not have the same color or if they are semi-transparent.
// Therefor we add top and border bottoms to the `tr`s and left and right borders
// to the `td`s or `th`s

.Table-bordered {
  > :not(caption) > * {
    border-width: $Table-border-width 0;

    > * {
      border-width: 0 $Table-border-width;
    }
  }
}

.Table-borderless {
  > :not(caption) > * > * {
    border-bottom-width: 0;
  }

  > :not(:first-child) {
    border-top-width: 0;
  }
}

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

// For rows
.Table-striped {
  > tbody > tr:nth-of-type(#{$Table-striped-order}) > * {
    --#{$Prefix}table-accent-bg: var(--#{$Prefix}table-striped-bg);
    color: var(--#{$Prefix}table-striped-color);
  }
}

// For columns
.Table-striped-columns {
  > :not(caption) > tr > :nth-child(#{$Table-striped-columns-order}) {
    --#{$Prefix}table-accent-bg: var(--#{$Prefix}table-striped-bg);
    color: var(--#{$Prefix}table-striped-color);
  }
}

// Active table
//
// The `.table-active` class can be added to highlight rows or cells

.Table-active {
  --#{$Prefix}table-accent-bg: var(--#{$Prefix}table-active-bg);
  color: var(--#{$Prefix}table-active-color);
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.Table-hover {
  > tbody > tr:hover > * {
    --#{$Prefix}table-accent-bg: var(--#{$Prefix}table-hover-bg);
    color: var(--#{$Prefix}table-hover-color);
  }
}

// Table variants
//
// Table variants set the table cell backgrounds, border colors
// and the colors of the striped, hovered & active tables

@each $colorKey, $colorValue in $Table-variants {
  .Table-#{$colorKey} {
    $color: Color-contrast($colorValue);
    $hover-bg: mix($color, $colorValue, percentage($Table-hover-bg-factor));
    $striped-bg: mix($color, $colorValue, percentage($Table-striped-bg-factor));
    $active-bg: mix($color, $colorValue, percentage($Table-active-bg-factor));
    $border-color: mix($color, $colorValue, percentage($Table-border-factor));

    --#{$Prefix}table-color: #{$color};
    --#{$Prefix}table-bg: #{$colorValue};
    --#{$Prefix}table-border-color: #{$border-color};
    --#{$Prefix}table-striped-bg: #{$striped-bg};
    --#{$Prefix}table-striped-color: #{Color-contrast($striped-bg)};
    --#{$Prefix}table-active-bg: #{$active-bg};
    --#{$Prefix}table-active-color: #{Color-contrast($active-bg)};
    --#{$Prefix}table-hover-bg: #{$hover-bg};
    --#{$Prefix}table-hover-color: #{Color-contrast($hover-bg)};

    color: var(--#{$Prefix}table-color);
    border-color: var(--#{$Prefix}table-border-color);
  }
}

// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

@each $breakpoint in map-keys($Grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $Grid-breakpoints);

  @include media-breakpoint-down($breakpoint) {
    .Table-responsive#{$infix} {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
  }
}