// ===========================================================================
// Mixins - Grid system
//
// Generate semantic grid columns with these mixins.
// ===========================================================================
@use 'sass:math';

/**
 * Row
 *
*/

@mixin Make-row($gutter: $Grid-gutter-width) {
  --#{$Prefix}gutter-x: #{$gutter};
  --#{$Prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
  margin-top: calc(-1 * var(--#{$Prefix}gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-.5 * var(--#{$Prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-.5 * var(--#{$Prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin Make-col-ready() {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--#{$Prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--#{$Prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{$Prefix}gutter-y);
}

// Row columns

@mixin Make-col($size: false, $columns: $Grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(math.div($size, $columns));

  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin Make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin Make-col-offset($size, $columns: $Grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

/**
 * Row columns
 *
 * Specify on a parent element(e.g., .Row) to force immediate children into NN
 * number of columns. Supports wrapping to new lines, but does not do a Masonry style grid.
*/

@mixin Row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: math.div(100%, $count);
  }
}

/**
 * Framework grid generation
 *
 * Used only by Bootstrap to generate the correct number of grid classes given
 * any value of `$Grid-columns`.
*/
@mixin Make-grid-columns($columns: $Grid-columns, $gutter: $Grid-gutter-width, $breakpoints: $Grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .Col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .Row-cols#{$infix}-auto > * {
        @include Make-col-auto();
      }

      @if $Grid-row-columns > 0 {
        @for $i from 1 through $Grid-row-columns {
          .Row-cols#{$infix}-#{$i} {
            @include Row-cols($i);
          }
        }
      }

      .Col#{$infix}-auto {
        @include Make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .Col#{$infix}-#{$i} {
            @include Make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .Offset#{$infix}-#{$i} {
              @include Make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.

      @each $key, $value in $Gutters {
        .G#{$infix}-#{$key},
        .GX#{$infix}-#{$key} {
          --#{$Prefix}gutter-x: #{$value};
        }

        .G#{$infix}-#{$key},
        .GY#{$infix}-#{$key} {
          --#{$Prefix}gutter-y: #{$value};
        }
      }
    }
  }
}
