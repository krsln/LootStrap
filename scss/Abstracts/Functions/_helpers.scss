// ===========================================================================
// Functions - Helpers
// ===========================================================================
@use 'sass:math';

/**
 * Remove the unit of a value
 *
 * @param {Number} $number - Number to remove unit from
 * @return {Number} - Unit-less value
*/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    //@return $number / ($number * 0 + 1);
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

/**
 * Helper function to replace characters in a string
 * Replaces all instances of `$search` with `$replace` in `$string`
 *
 * @param {String} $string - Initial string
 * @param {String} $search - Substring to replace
 * @param {String} $replace ('') - New value
 * @return {String} - Updated string
*/
@function str-replace($string, $original, $replacement: "") {
  $index: str-index($string, $original);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replacement + str-replace(str-slice($string, $index + str-length($original)), $original, $replacement);
  }

  @return $string;
}

/**
 * Function to create an optimized svg url
 *
 * https://codepen.io/kevinweber/pen/dXWoRw
 * https://css-tricks.com/probably-dont-base64-svg/
 * https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
 * Reference: https://codepen.io/jakob-e/pen/doMoML
*/
@function SVG-url($svg) {
  //
  //  Add missing namespace
  //
  @if not str-index($svg,xmlns) {
    $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(math.div(str-length($svg), $slice));
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '%', '%25');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $chunk: str-replace($chunk, '{', '%7B');
    $chunk: str-replace($chunk, '}', '%7D');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');

    //
    //    The maybe list
    //
    //    Keep size and compile time down
    //    ... only add on documented fail
    //
    //  $chunk: str-replace($chunk, '|', '%7C');
    //  $chunk: str-replace($chunk, '[', '%5B');
    //  $chunk: str-replace($chunk, ']', '%5D');
    //  $chunk: str-replace($chunk, '^', '%5E');
    //  $chunk: str-replace($chunk, '`', '%60');
    //  $chunk: str-replace($chunk, ';', '%3B');
    //  $chunk: str-replace($chunk, '?', '%3F');
    //  $chunk: str-replace($chunk, ':', '%3A');
    //  $chunk: str-replace($chunk, '@', '%40');
    //  $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin SVG-background($svg) {
  background-image: SVG-url($svg);
}
